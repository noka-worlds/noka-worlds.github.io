"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[872],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(g,i(i({ref:t},u),{},{components:r})):n.createElement(g,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8451:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={title:"Overview",tags:["Stanford","CS110L","Rust","System Programming"]},s=void 0,c={unversionedId:"STANFORD-CS110L/index",id:"STANFORD-CS110L/index",title:"Overview",description:"Introduction",source:"@site/Blogs/learning/STANFORD-CS110L/index.mdx",sourceDirName:"STANFORD-CS110L",slug:"/STANFORD-CS110L/",permalink:"/learning/STANFORD-CS110L/",draft:!1,tags:[{label:"Stanford",permalink:"/learning/tags/stanford"},{label:"CS110L",permalink:"/learning/tags/cs-110-l"},{label:"Rust",permalink:"/learning/tags/rust"},{label:"System Programming",permalink:"/learning/tags/system-programming"}],version:"current",frontMatter:{title:"Overview",tags:["Stanford","CS110L","Rust","System Programming"]},sidebar:"mySidebar",previous:{title:"Checkpoint 0: Networking Warmup",permalink:"/learning/STANFORD-CS144/lab0"},next:{title:"Week 1 Exercises: Hello world",permalink:"/learning/STANFORD-CS110L/week1"}},u={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Course Material",id:"course-material",level:2}],p={toc:m};function d(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"CS110L a supplemental, 2-unit, C/NC class intended for those who have recently taken or are concurrently taking CS110. The goal is to offer an approachable and engaging exposure to effective, robust, and secure systems programming."),(0,o.kt)("p",null,"Our focus is on safety and robustness in systems programming: Where do things often go wrong in computer systems? How can we avoid common pitfalls? We will introduce and use the Rust programming language as a vehicle to teach mental models and paradigms that have been shown to be helpful in preventing errors, and we will examine how these features have made their way back into C++. "),(0,o.kt)("p",null,"The first three weeks will focus on preventing many of the types of problems that you encountered in CS 107: how can we prevent buffer overflows, memory leaks, use-after-free bugs, and other sorts of memory errors? (note: it\u2019s okay if you\u2019re a bit rusty on CS107 material! we\u2019ll review everything you need to know.) Then, we will focus on preventing common mistakes that arise in the programming settings CS 110 covers: how do we write safe code when multiprocessing and multithreading are involved? Check out the syllabus for an overview of course material."),(0,o.kt)("p",null,"Outside of lecture, there will be small weekly programming exercises to help you reinforce the material; I expect these to take 1-3 hours to complete (and I\u2019ll be generous with partial credit and extensions \u2013 this is not meant to be a stressful class!)."),(0,o.kt)("p",null,"In addition, there will be two projects throughout the quarter, which may be completed in small groups: in the first project, you\u2019ll implement a simple version of gdb; in the second, you\u2019ll implement a high-performance load balancer for a server. (Both of these may sound intimidating right now, but I promise that you\u2019ll have all of the tools you need to complete them!) You are also welcome to propose your own project to replace either of these. There are no exams."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://web.stanford.edu/class/cs110l/handouts/course-information/"},"Course Information")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},"Lab"),(0,o.kt)("th",{parentName:"tr",align:"center"},"My Progress"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Week 1 : Hello world"),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"../STANFORD-CS144/lab0"},"Notes"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Week 2 : Ownership and structs"),(0,o.kt)("td",{parentName:"tr",align:"center"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Week 3 : Error handling and I/O"),(0,o.kt)("td",{parentName:"tr",align:"center"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Week 5 : Farm meets multithreading"),(0,o.kt)("td",{parentName:"tr",align:"center"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Week 6 : Sharing Data by Communicating"),(0,o.kt)("td",{parentName:"tr",align:"center"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Project 1 : The DEET Debugger"),(0,o.kt)("td",{parentName:"tr",align:"center"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Project 2 : Balancebeam"),(0,o.kt)("td",{parentName:"tr",align:"center"})))),(0,o.kt)("h2",{id:"course-material"},"Course Material"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://reberhardt.com/cs110l/spring-2020/"},"Coure Website: Spring 2020")))}d.isMDXComponent=!0}}]);