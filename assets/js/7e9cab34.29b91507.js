"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3540],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),f=l,d=p["".concat(s,".").concat(f)]||p[f]||m[f]||a;return t?r.createElement(d,i(i({ref:n},u),{},{components:t})):r.createElement(d,i({ref:n},u))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2627:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return m}});var r=t(7462),l=t(3366),a=(t(7294),t(3905)),i=["components"],o={title:"Week 2 Exercises: Ownership and structs",tags:["Stanford","CS110L","Rust","System Programming"],toc_max_heading_level:5},s=void 0,c={unversionedId:"STANFORD-CS110L/week2",id:"STANFORD-CS110L/week2",title:"Week 2 Exercises: Ownership and structs",description:"Part 1: Ownership short-answer exercises",source:"@site/Blogs/learning/STANFORD-CS110L/week2.mdx",sourceDirName:"STANFORD-CS110L",slug:"/STANFORD-CS110L/week2",permalink:"/learning/STANFORD-CS110L/week2",draft:!1,tags:[{label:"Stanford",permalink:"/learning/tags/stanford"},{label:"CS110L",permalink:"/learning/tags/cs-110-l"},{label:"Rust",permalink:"/learning/tags/rust"},{label:"System Programming",permalink:"/learning/tags/system-programming"}],version:"current",frontMatter:{title:"Week 2 Exercises: Ownership and structs",tags:["Stanford","CS110L","Rust","System Programming"],toc_max_heading_level:5},sidebar:"mySidebar",previous:{title:"Week 1 Exercises: Hello world",permalink:"/learning/STANFORD-CS110L/week1"}},u={},m=[{value:"Part 1: Ownership short-answer exercises",id:"part-1-ownership-short-answer-exercises",level:3},{value:"Example 1:",id:"example-1",level:4},{value:"Amendment",id:"amendment",level:5},{value:"Example 2:",id:"example-2",level:4},{value:"Example 3:",id:"example-3",level:4},{value:"Amendment",id:"amendment-1",level:5},{value:"Part 2: rdiff",id:"part-2-rdiff",level:3},{value:"Milestone 1: Reading the two files into vectors of lines",id:"milestone-1-reading-the-two-files-into-vectors-of-lines",level:4},{value:"Milestone 2: Implementing the Grid interface",id:"milestone-2-implementing-the-grid-interface",level:4},{value:"Milestone 3: Implementing Longest Common Subsequence",id:"milestone-3-implementing-longest-common-subsequence",level:4},{value:"Milestone 4: Using LCS to construct the full diff",id:"milestone-4-using-lcs-to-construct-the-full-diff",level:4},{value:"Optional: rwc",id:"optional-rwc",level:3},{value:"Optional challenge: Conway\u2019s Game of Life",id:"optional-challenge-conways-game-of-life",level:3},{value:"Course Material:",id:"course-material",level:3}],p={toc:m};function f(e){var n=e.components,t=(0,l.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"part-1-ownership-short-answer-exercises"},"Part 1: Ownership short-answer exercises"),(0,a.kt)("h4",{id:"example-1"},"Example 1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let mut s = String::from("hello");\n    let ref1 = &s;\n    let ref2 = &ref1;\n    let ref3 = &ref2;\n    s = String::from("goodbye");\n    println!("{}", ref3.to_uppercase());\n}\n')),(0,a.kt)("p",null,"From ",(0,a.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/error-index.html"},"Rust documentation"),", this is a compile error of An attempt was made to assign to a borrowed value. The ownership rule of rust declare that if a variable's reference have been hold by another reference, the variable itself cannot be assign a new value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'error[E0506]: cannot assign to `s` because it is borrowed\n --\x3e src/main.rs:6:5\n  |\n3 |     let ref1 = &s;\n  |                -- borrow of `s` occurs here\n...\n6 |     s = String::from("goodbye");\n  |     ^ assignment to borrowed `s` occurs here\n7 |     println!("{}", ref3.to_uppercase());\n  |                    ------------------- borrow later used here\n')),(0,a.kt)("h5",{id:"amendment"},"Amendment"),(0,a.kt)("p",null,"Remove all reference, use call by value instead."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let mut s = String::from("hello");\n    let ref1 =  s;\n    let ref2 =  ref1;\n    let ref3 =  ref2;\n    s = String::from("goodbye");\n    println!("{}", ref3.to_uppercase());\n}\n')),(0,a.kt)("h4",{id:"example-2"},"Example 2:"),(0,a.kt)("p",null,"Main function missing\nIf this is a function by itself, then the return value should not be a borrowing value. (E0106)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn drip_drop() -> &String {\n    let s = String::from("hello world!");\n    return &s;\n}\n')),(0,a.kt)("p",null,"Amendment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn drip_drop() -> String {\n    let s = String::from("hello world!");\n    return s;\n}\n')),(0,a.kt)("h4",{id:"example-3"},"Example 3:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let s1 = String::from("hello");\n    let mut v = Vec::new();\n    v.push(s1);\n    let s2: String = v[0];\n    println!("{}", s2);\n}\n')),(0,a.kt)("h5",{id:"amendment-1"},"Amendment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let s1 = String::from("hello");\n    let mut v = Vec::new();\n    v.push(s1);\n    let ref s2: String = v[0];\n    println!("{}", s2);\n}\n')),(0,a.kt)("h3",{id:"part-2-rdiff"},"Part 2: rdiff"),(0,a.kt)("h4",{id:"milestone-1-reading-the-two-files-into-vectors-of-lines"},"Milestone 1: Reading the two files into vectors of lines"),(0,a.kt)("h4",{id:"milestone-2-implementing-the-grid-interface"},"Milestone 2: Implementing the Grid interface"),(0,a.kt)("h4",{id:"milestone-3-implementing-longest-common-subsequence"},"Milestone 3: Implementing Longest Common Subsequence"),(0,a.kt)("h4",{id:"milestone-4-using-lcs-to-construct-the-full-diff"},"Milestone 4: Using LCS to construct the full diff"),(0,a.kt)("h3",{id:"optional-rwc"},"Optional: rwc"),(0,a.kt)("h3",{id:"optional-challenge-conways-game-of-life"},"Optional challenge: Conway\u2019s Game of Life"),(0,a.kt)("h3",{id:"course-material"},"Course Material:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://reberhardt.com/cs110l/spring-2020/"},"Course Website"),(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("a",{parentName:"p",href:"https://reberhardt.com/cs110l/spring-2020/assignments/week-2-exercises/"},"Hangout")))}f.isMDXComponent=!0}}]);