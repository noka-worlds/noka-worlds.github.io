"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3540],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(t),f=l,d=m["".concat(o,".").concat(f)]||m[f]||p[f]||i;return t?r.createElement(d,a(a({ref:n},c),{},{components:t})):r.createElement(d,a({ref:n},c))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2627:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=t(7462),l=t(3366),i=(t(7294),t(3905)),a=["components"],s={title:"Week 2 Exercises: Ownership and structs",tags:["Stanford","CS110L","Rust","System Programming"],toc_max_heading_level:5},o=void 0,u={unversionedId:"STANFORD-CS110L/week2",id:"STANFORD-CS110L/week2",title:"Week 2 Exercises: Ownership and structs",description:"Part 1: Ownership short-answer exercises",source:"@site/Blogs/learning/STANFORD-CS110L/week2.mdx",sourceDirName:"STANFORD-CS110L",slug:"/STANFORD-CS110L/week2",permalink:"/learning/STANFORD-CS110L/week2",draft:!1,tags:[{label:"Stanford",permalink:"/learning/tags/stanford"},{label:"CS110L",permalink:"/learning/tags/cs-110-l"},{label:"Rust",permalink:"/learning/tags/rust"},{label:"System Programming",permalink:"/learning/tags/system-programming"}],version:"current",frontMatter:{title:"Week 2 Exercises: Ownership and structs",tags:["Stanford","CS110L","Rust","System Programming"],toc_max_heading_level:5},sidebar:"mySidebar",previous:{title:"Week 1 Exercises: Hello world",permalink:"/learning/STANFORD-CS110L/week1"}},c={},p=[{value:"Part 1: Ownership short-answer exercises",id:"part-1-ownership-short-answer-exercises",level:3},{value:"Example 1:",id:"example-1",level:4},{value:"Amendment",id:"amendment",level:5},{value:"Example 2:",id:"example-2",level:4},{value:"Example 3:",id:"example-3",level:4},{value:"Amendment",id:"amendment-1",level:5},{value:"Part 2: rdiff",id:"part-2-rdiff",level:3},{value:"Milestone 1: Reading the two files into vectors of lines",id:"milestone-1-reading-the-two-files-into-vectors-of-lines",level:4},{value:"Milestone 2: Implementing the Grid interface",id:"milestone-2-implementing-the-grid-interface",level:4},{value:"Milestone 3: Implementing Longest Common Subsequence",id:"milestone-3-implementing-longest-common-subsequence",level:4},{value:"Milestone 4: Using LCS to construct the full diff",id:"milestone-4-using-lcs-to-construct-the-full-diff",level:4},{value:"Optional: rwc",id:"optional-rwc",level:3},{value:"Optional challenge: Conway\u2019s Game of Life",id:"optional-challenge-conways-game-of-life",level:3},{value:"Course Material:",id:"course-material",level:3}],m={toc:p};function f(e){var n=e.components,t=(0,l.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"part-1-ownership-short-answer-exercises"},"Part 1: Ownership short-answer exercises"),(0,i.kt)("h4",{id:"example-1"},"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let mut s = String::from("hello");\n    let ref1 = &s;\n    let ref2 = &ref1;\n    let ref3 = &ref2;\n    s = String::from("goodbye");\n    println!("{}", ref3.to_uppercase());\n}\n')),(0,i.kt)("p",null,"From ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/error-index.html"},"Rust documentation"),", this is a compile error of An attempt was made to assign to a borrowed value. The ownership rule of rust declare that if a variable's reference have been hold by another reference, the variable itself cannot be assign a new value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'error[E0506]: cannot assign to `s` because it is borrowed\n --\x3e src/main.rs:6:5\n  |\n3 |     let ref1 = &s;\n  |                -- borrow of `s` occurs here\n...\n6 |     s = String::from("goodbye");\n  |     ^ assignment to borrowed `s` occurs here\n7 |     println!("{}", ref3.to_uppercase());\n  |                    ------------------- borrow later used here\n')),(0,i.kt)("h5",{id:"amendment"},"Amendment"),(0,i.kt)("p",null,"Remove all reference, use call by value instead."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let mut s = String::from("hello");\n    let ref1 =  s;\n    let ref2 =  ref1;\n    let ref3 =  ref2;\n    s = String::from("goodbye");\n    println!("{}", ref3.to_uppercase());\n}\n')),(0,i.kt)("h4",{id:"example-2"},"Example 2:"),(0,i.kt)("p",null,"Main function missing\nIf this is a function by itself, then the return value should not be a borrowing value. (E0106)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn drip_drop() -> &String {\n    let s = String::from("hello world!");\n    return &s;\n}\n')),(0,i.kt)("p",null,"Amendment"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn drip_drop() -> String {\n    let s = String::from("hello world!");\n    return s;\n}\n')),(0,i.kt)("h4",{id:"example-3"},"Example 3:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let s1 = String::from("hello");\n    let mut v = Vec::new();\n    v.push(s1);\n    let s2: String = v[0];\n    println!("{}", s2);\n}\n')),(0,i.kt)("h5",{id:"amendment-1"},"Amendment"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let s1 = String::from("hello");\n    let mut v = Vec::new();\n    v.push(s1);\n    let ref s2: String = v[0];\n    println!("{}", s2);\n}\n')),(0,i.kt)("h3",{id:"part-2-rdiff"},"Part 2: rdiff"),(0,i.kt)("h4",{id:"milestone-1-reading-the-two-files-into-vectors-of-lines"},"Milestone 1: Reading the two files into vectors of lines"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fn read_file_lines(filename: &String) -> Result<Vec<String>, io::Error>")," will take in a filename and return a result data type which includes a vec of string if no error, or an error if error existed"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"fn read_file_lines(filename: &String) -> Result<Vec<String>, io::Error> { \n    let file = File::open(filename)?;  \n    let mut v = Vec::new();\n       for line in io::BufReader::new(file).lines() {\n        let line_str = line?;\n        v.push(line_str); \n    } \n    Ok(v) \n}\n")),(0,i.kt)("h4",{id:"milestone-2-implementing-the-grid-interface"},"Milestone 2: Implementing the Grid interface"),(0,i.kt)("p",null,"Unlike C++ there is no such thing as nullptr which can point to non-valid location, ",(0,i.kt)("inlineCode",{parentName:"p"},"Option<T>")," need to be use when we want a ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),".\nThis is also an example of how to use ",(0,i.kt)("inlineCode",{parentName:"p"},"Err()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok()")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"Result<T, E>")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn get(&self, row: usize, col: usize) -> Option<usize> {\n    if row >= self.num_rows || col >= self.num_cols {\n        None \n    } else {\n        Some(self.elems[row*self.num_cols + col]) \n    } \n}\n\npub fn set(&mut self, row: usize, col: usize, val: usize) -> Result<(), &\'static str> { \n    if row >= self.num_rows || col >= self.num_cols { \n        Err("out of bound")\n    } else {\n        self.elems[row*self.num_cols + col ] = val;\n        Ok(()) \n    }   \n}\n')),(0,i.kt)("h4",{id:"milestone-3-implementing-longest-common-subsequence"},"Milestone 3: Implementing Longest Common Subsequence"),(0,i.kt)("p",null,"Here is just a direct convert of the psedo code to rust code, nth relly special."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"fn lcs(seq1: &Vec<String>, seq2: &Vec<String>) -> Grid { \n    let m = seq1.len();\n    let n = seq2.len();\n    let mut c = grid::Grid::new (m+1,n+1); \n    for i in 0..m+1 {\n        c.set(i,0,0).unwrap();\n    }\n    for i in 0..n+1 {\n        c.set(0,i,0).unwrap();\n    }\n    for i in 0..m {\n        for j in 0..n {\n            if seq1[i]==seq2[j]{\n                let val = c.get(i,j).unwrap() + 1;\n                 c.set(i+1,j+1,val).unwrap();\n            } else {\n                let val1 = c.get(i+1,j).unwrap() ;\n                let val2 = c.get(i,j+1).unwrap() ;\n                c.set(i+1,j+1,max(val1,val2)).unwrap();\n            }\n        }\n    }\n    return c; \n}\n")),(0,i.kt)("h4",{id:"milestone-4-using-lcs-to-construct-the-full-diff"},"Milestone 4: Using LCS to construct the full diff"),(0,i.kt)("p",null,"Here is just a direct convert of the psedo code to rust code, nth relly special."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn print_diff(lcs_table: &Grid, lines1: &Vec<String>, lines2: &Vec<String>, i: usize, j: usize) {\n    if i > 0 && j > 0 && lines1[i-1] == lines2[j-1] {\n        print_diff(lcs_table,lines1,lines2,i-1,j-1);\n        println!("  {}",lines1[i-1]);\n    } else if j > 0 && (i==0 || lcs_table.get(i,j-1).unwrap() >= lcs_table.get(i-1,j).unwrap()) {\n        print_diff(lcs_table,lines1,lines2,i ,j-1);\n        println!("> {}",lines2[j-1]);\n    } else if i > 0 && (j==0 || lcs_table.get(i,j-1).unwrap() <lcs_table.get(i-1,j).unwrap()) {\n        print_diff(lcs_table,lines1,lines2,i-1,j );\n        println!("< {}",lines1[i-1]);\n    } else {\n        print!("");\n    } \n}\n\n \nfn main() {\n    let args: Vec<String> = env::args().collect();\n    if args.len() < 3 {\n        println!("Too few arguments.");\n        process::exit(1);\n    }\n    let filename1 = &args[1];\n    let filename2 = &args[2];\n\n    let line1 = read_file_lines(filename1).unwrap();\n    let line2 = read_file_lines(filename2).unwrap();\n\n    let lcs  = lcs(&line1,&line2);\n    print_diff(&lcs ,&line1 ,&line2 ,line1.len(),line2.len());\n}\n')),(0,i.kt)("h3",{id:"optional-rwc"},"Optional: rwc"),(0,i.kt)("h3",{id:"optional-challenge-conways-game-of-life"},"Optional challenge: Conway\u2019s Game of Life"),(0,i.kt)("h3",{id:"course-material"},"Course Material:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://reberhardt.com/cs110l/spring-2020/"},"Course Website"),(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("a",{parentName:"p",href:"https://reberhardt.com/cs110l/spring-2020/assignments/week-2-exercises/"},"Hangout")))}f.isMDXComponent=!0}}]);