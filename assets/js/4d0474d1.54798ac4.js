"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3586],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,k=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(k,c(c({ref:t},u),{},{components:n})):r.createElement(k,c({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4949:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],i={title:"Checkpoint 0: Networking Warmup",tags:["Stanford","CS144","C++","Computer Networking"]},s=void 0,l={unversionedId:"STANFORD-CS110L/week1",id:"STANFORD-CS110L/week1",title:"Checkpoint 0: Networking Warmup",description:"Webget:",source:"@site/Blogs/learning/STANFORD-CS110L/week1.mdx",sourceDirName:"STANFORD-CS110L",slug:"/STANFORD-CS110L/week1",permalink:"/learning/STANFORD-CS110L/week1",draft:!1,tags:[{label:"Stanford",permalink:"/learning/tags/stanford"},{label:"CS144",permalink:"/learning/tags/cs-144"},{label:"C++",permalink:"/learning/tags/c"},{label:"Computer Networking",permalink:"/learning/tags/computer-networking"}],version:"current",frontMatter:{title:"Checkpoint 0: Networking Warmup",tags:["Stanford","CS144","C++","Computer Networking"]}},u={},p=[{value:"Webget:",id:"webget",level:3},{value:"Notes:",id:"notes",level:4},{value:"Byte Stream:",id:"byte-stream",level:3}],d={toc:p};function m(e){var t=e.components,i=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"webget"},"Webget:"),(0,a.kt)("p",null,"From ",(0,a.kt)("a",{parentName:"p",href:"https://cs144.github.io/doc/lab0/class_t_c_p_socket.html"},"TCPsocket documentation"),", the example code looks like bellow, But please aware that there is not any ",(0,a.kt)("strong",{parentName:"p"},"HTTP request")," here, the address is a ",(0,a.kt)("strong",{parentName:"p"},"local address"),", and the example code consisted of both ",(0,a.kt)("strong",{parentName:"p"},"server")," and ",(0,a.kt)("strong",{parentName:"p"},"client")," .  "),(0,a.kt)("p",null,"Example code from ",(0,a.kt)("a",{parentName:"p",href:"https://cs144.github.io/doc/lab0/class_t_c_p_socket.html"},"TCPsocket documentation")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'const uint16_t portnum = ((std::random_device()()) % 50000) + 1025;\n \n// create a TCP socket, bind it to a local address, and listen\nTCPSocket sock1;\nsock1.bind(Address("127.0.0.1", portnum));\nsock1.listen(1);\n \n// create another socket and connect to the first one\nTCPSocket sock2;\nsock2.connect(Address("127.0.0.1", portnum));\n \n// accept the connection\nauto sock3 = sock1.accept();\nsock3.write("hi there");\n \nauto recvd = sock2.read();\nsock2.write("hi yourself");\n \nauto recvd2 = sock3.read();\n \nsock1.close();              // don\'t need to accept any more connections\nsock2.close();              // you can call close(2) on a socket\nsock3.shutdown(SHUT_RDWR);  // you can also shutdown(2) a socket\nif (recvd != "hi there" || recvd2 != "hi yourself") {\n    throw std::runtime_error("wrong data received");\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"C/C++ socket")),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(5247).Z,width:"330",height:"375"})),(0,a.kt)("p",null,"From the image above, we can understand we just need 1 socket to  "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"connect to the server"),(0,a.kt)("li",{parentName:"ol"},"send a request"),(0,a.kt)("li",{parentName:"ol"},"read the response.")),(0,a.kt)("h4",{id:"notes"},"Notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Following section 2.1 should give you enough information to what you need to do actually"),(0,a.kt)("li",{parentName:"ul"},"Figure out how a HTTP request is form might be useful")),(0,a.kt)("h3",{id:"byte-stream"},"Byte Stream:"),(0,a.kt)("p",null,"The tricky part (if have) is choosing the correct data structure for the storage of Byte Stream, We could know the datastructure should support ",(0,a.kt)("inlineCode",{parentName:"p"},"push_back()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"pop_front()")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"write()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"read()")," functions. Therefore I choose to use ",(0,a.kt)("inlineCode",{parentName:"p"},"deque<char>")," for storage, ",(0,a.kt)("inlineCode",{parentName:"p"},"vector<char>")," will work too but definitely not as efficient as deque does as pop_front() in vector require O(N) time complexity while pop_front() in deque require O(1) time complexity"))}m.isMDXComponent=!0},5247:function(e,t,n){t.Z=n.p+"assets/images/C-socket-f7bfe0dc50b43a5630ff543cb0954db4.png"}}]);