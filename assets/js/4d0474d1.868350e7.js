"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3586],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,h=m["".concat(u,".").concat(d)]||m[d]||p[d]||l;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4949:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],o={title:"Week 1 Exercises: Hello world",tags:["Stanford","CS110L","Rust","System Programming"]},u=void 0,s={unversionedId:"STANFORD-CS110L/week1",id:"STANFORD-CS110L/week1",title:"Week 1 Exercises: Hello world",description:"Part 1: Hello world",source:"@site/Blogs/learning/STANFORD-CS110L/week1.mdx",sourceDirName:"STANFORD-CS110L",slug:"/STANFORD-CS110L/week1",permalink:"/learning/STANFORD-CS110L/week1",draft:!1,tags:[{label:"Stanford",permalink:"/learning/tags/stanford"},{label:"CS110L",permalink:"/learning/tags/cs-110-l"},{label:"Rust",permalink:"/learning/tags/rust"},{label:"System Programming",permalink:"/learning/tags/system-programming"}],version:"current",frontMatter:{title:"Week 1 Exercises: Hello world",tags:["Stanford","CS110L","Rust","System Programming"]},sidebar:"mySidebar",previous:{title:"Overview",permalink:"/learning/STANFORD-CS110L/"},next:{title:"Week 2 Exercises: Ownership and structs",permalink:"/learning/STANFORD-CS110L/week2"}},c={},p=[{value:"Part 1: Hello world",id:"part-1-hello-world",level:3},{value:"Part 2: warmup",id:"part-2-warmup",level:3},{value:"Variables",id:"variables",level:4},{value:"add_n",id:"add_n",level:4},{value:"add_n_inplace",id:"add_n_inplace",level:4},{value:"dedup",id:"dedup",level:4},{value:"Part 3: Hangman",id:"part-3-hangman",level:3},{value:"Course Material:",id:"course-material",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"part-1-hello-world"},"Part 1: Hello world"),(0,l.kt)("p",null,"There are 3 command introduced in this section"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"cargo build")," to compile the code  "),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"cargo run")," to compile and run the code "),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"cargo test")," to run the tests")),(0,l.kt)("h3",{id:"part-2-warmup"},"Part 2: warmup"),(0,l.kt)("h4",{id:"variables"},"Variables"),(0,l.kt)("p",null,"Unlike most of the other languages, variable are default to be constant, which is not mutable, to declare a mutable variable,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"}," let mut retv: Vec<i32> = Vec::new();\n let mut elements = HashSet::new();\n let mut n: i32 = 1; \n")),(0,l.kt)("p",null,'There is a pretty cute feature in rust, which is called "type interface", which the compiler could figure out the type that the data should be.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"}," let mut n = 1; \n")),(0,l.kt)("p",null,"We need to implement 3 function in this section, "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Implement ",(0,l.kt)("inlineCode",{parentName:"li"},"add_n"),", which takes a vector of numbers and some number n. The function should return a new vector whose elements are the numbers in the original vector v with n added to each number."),(0,l.kt)("li",{parentName:"ul"},"Implement ",(0,l.kt)("inlineCode",{parentName:"li"},"add_n_inplace"),", which does the same thing as add_n, but modifies v directly (in place) and does not return anything."),(0,l.kt)("li",{parentName:"ul"},"Implement ",(0,l.kt)("inlineCode",{parentName:"li"},"dedup")," that removes duplicate elements from a vector in-place (i.e. modifies v directly). If an element is repeated anywhere in the vector, you should keep the element that appears first. You may want to use a HashSet for this.")),(0,l.kt)("h4",{id:"add_n"},"add_n"),(0,l.kt)("p",null,"The parameter ",(0,l.kt)("inlineCode",{parentName:"p"},"v: Vec<i32>")," is a constant, so there is not any way to implement this function in place, but require declaring a new vector."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"fn add_n(v: Vec<i32>, n: i32) -> Vec<i32> {\n    let mut retv: Vec<i32> = Vec::new();\n    for i in v.iter()  { \n        retv.push(i + n);\n    }\n    return retv;\n}\n")),(0,l.kt)("h4",{id:"add_n_inplace"},"add_n_inplace"),(0,l.kt)("p",null,"The parameter ",(0,l.kt)("inlineCode",{parentName:"p"},"v: &mut Vec<i32>")," is a mutable vector, so we could make changes to vector directly."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"fn add_n_inplace(v: &mut Vec<i32>, n: i32) {\n    for i in 0..v.len() {\n        v[i] = v[i] + n;\n    }\n}\n")),(0,l.kt)("h4",{id:"dedup"},"dedup"),(0,l.kt)("p",null,"Declare a hashset ",(0,l.kt)("inlineCode",{parentName:"p"},"elements")," to keep track every unique element in the ",(0,l.kt)("inlineCode",{parentName:"p"},"v: &mut Vec<i32>")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"fn dedup(v: &mut Vec<i32>) {\n    let mut elements = HashSet::new();\n    let mut newv : Vec<i32> = Vec::new();\n    for i in 0..v.len() {\n        if elements.contains(&v[i]){\n            continue;\n        } else {\n            newv.push(v[i]);\n            elements.insert(v[i]);\n        } \n    }\n    v.clear();\n    for i in 0..newv.len() { \n        v.push(newv[i]);\n    }\n}\n")),(0,l.kt)("h3",{id:"part-3-hangman"},"Part 3: Hangman"),(0,l.kt)("p",null,"I write a separate ",(0,l.kt)("a",{parentName:"p",href:"../../projects/rust-hangman"},"blog")," for this mini-project."),(0,l.kt)("h3",{id:"course-material"},"Course Material:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://reberhardt.com/cs110l/spring-2020/"},"Course Website"),(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("a",{parentName:"p",href:"https://reberhardt.com/cs110l/spring-2020/assignments/week-1-exercises/"},"Hangout")))}d.isMDXComponent=!0}}]);